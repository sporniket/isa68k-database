Row ID	Mnemonic	Synopsys	Opcode	Supplemental Word #1	Supplemental Word #2	Domain	.b	.w	.l	Number of operands	Operand 1	Data Register Direct Mode	Address Register Direct Mode	Address Register Indirect Mode	Address Register Indirect with Postincrement Mode	Address Register Indirect with Predecrement Mode	Address Register Indirect with Displacement Mode	Address Register Indirect with Index (8-Bit Displacement) Mode	Address Register Indirect with Index (Base Displacement) Mode	Memory Indirect Postindexed Mode	Memory Indirect Preindexed Mode	Program Counter Indirect with Displacement Mode	Program Counter Indirect with Index (8-Bit Displacement) Mode	Program Counter Indirect with Index (Base Displacement) Mode	Program Counter Memory Indirect Postindexed Mode	Program Counter Memory Indirect Preindexed Mode	Absolute Short Addressing Mode	Absolute Long Addressing Mode	Immediate Data	Signed value	Operand 2	Data Register Direct Mode	Address Register Direct Mode	Address Register Indirect Mode	Address Register Indirect with Postincrement Mode	Address Register Indirect with Predecrement Mode	Address Register Indirect with Displacement Mode	Address Register Indirect with Index (8-Bit Displacement) Mode	Address Register Indirect with Index (Base Displacement) Mode	Memory Indirect Postindexed Mode	Memory Indirect Preindexed Mode	Program Counter Indirect with Displacement Mode	Program Counter Indirect with Index (8-Bit Displacement) Mode	Program Counter Indirect with Index (Base Displacement) Mode	Program Counter Memory Indirect Postindexed Mode	Program Counter Memory Indirect Preindexed Mode	Absolute Short Addressing Mode	Absolute Long Addressing Mode	Immediate Data	Signed value	Operand 3	Data Register Direct Mode	Address Register Direct Mode	Address Register Indirect Mode	Address Register Indirect with Postincrement Mode	Address Register Indirect with Predecrement Mode	Address Register Indirect with Displacement Mode	Address Register Indirect with Index (8-Bit Displacement) Mode	Address Register Indirect with Index (Base Displacement) Mode	Memory Indirect Postindexed Mode	Memory Indirect Preindexed Mode	Program Counter Indirect with Displacement Mode	Program Counter Indirect with Index (8-Bit Displacement) Mode	Program Counter Indirect with Index (Base Displacement) Mode	Program Counter Memory Indirect Postindexed Mode	Program Counter Memory Indirect Preindexed Mode	Absolute Short Addressing Mode	Absolute Long Addressing Mode	Immediate Data	Brief description	020+ only	020 only	Exclude 68000	Exclude 040	68000+68008 only	040 only
1	ABCD	ABCD Dy,Dx	1100.xxx.100.000.yyy				x			2	x	x																				x																																						Source10 + Destination10 + X → Destination10						
2	ABCD	ABCD -(Ay),-(Ax)	1100.xxx.100.001.yyy				x			2	x					x																				x																																		Source10 + Destination10 + X → Destination10						
3	ADD	ADD <ea>,Dn	1101.nnn.0ss.eee.aaa				x	x	x	2	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						Source + Destination → Destination						
4	ADD	ADD Dn,<ea>	1101.nnn.1ss.eee.aaa				x	x	x	2		x																			x			x	x	x	x	x	x	x	x						x	x																						Source + Destination → Destination						
5	ADDA	ADDA <ea>,An	1101.nnn.011.eee.aaa					x		2	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x				x																																					Source + Destination → Destination						
6	ADDA	ADDA <ea>,An	1101.nnn.111.eee.aaa						x	2	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x				x																																					Source + Destination → Destination						
7	ADDI	ADDI #<data>,<ea>	0000.011.0ss.eee.aaa				x	x	x	2																			x		x	x		x	x	x	x	x	x	x	x						x	x																						Immediate Data + Destination → Destination						
8	ADDQ	ADDQ #<data3.8>,<ea>	0101.ddd.0ss.eee.aaa				x	x	x	2																			3.8		x	x	x	x	x	x	x	x	x	x	x						x	x																						Immediate Data + Destination → Destination						
9	ADDX	ADDX Dy,Dx	1101.xxx.1ss.000.yyy				x	x	x	2	x	x																				x																																						Source + Destination + X → Destination						
10	ADDX	ADDX -(Ay),-(Ax)	1101.xxx.1ss.001.yyy				x	x	x	2	x					x																				x																																		Source + Destination + X → Destination						
11	AND	AND <ea>,Dn	1100.nnn.0ss.eee.aaa				x	x	x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						Source Λ Destination → Destination						
12	AND	AND Dn,<ea>	1100.nnn.1ss.eee.aaa				x	x	x	2		x																			x			x	x	x	x	x	x	x	x						x	x																						Source Λ Destination → Destination						
13	ANDI	ANDI #<data>,<ea>	0000.001.0ss.eee.aaa				x	x	x	2																			x		x	x		x	x	x	x	x	x	x	x						x	x																						Immediate Data Λ Destination → Destination						
14	ANDI	ANDI #<data>,CCR	0000.001.000.111.100				x			2	x																		x		CCR																																							Source Λ CCR → CCR						
15	ASL	ASL Dx,Dy	1110.xxx.1ss.100.yyy				x	x	x	2		x																			x	x																																						Destination Left Shifted By Count → Destination						
16	ASL	ASL #<data3.8>,Dy	1110.ddd.1ss.000.yyy				x	x	x	2																			x		x	x																																						Destination Left Shifted By Count → Destination						
17	ASL	ASL <ea>	1110.000.111.eee.aaa					x		1	x			x	x	x	x	x	x	x	x						x	x																																										Destination WORD Left Shifted By 1 → Destination						
18	ASR	ASR Dx,Dy	1110.xxx.0ss.100.yyy				x	x	x	2		x																			x	x																																						Destination Right Shifted with sign By Count → Destination						
19	ASR	ASR #<data3.8>,Dy	1110.ddd.0ss.000.yyy				x	x	x	2																			x		x	x																																						Destination Right Shifted with sign By Count → Destination						
20	ASR	ASR <ea>	1110.000.011.eee.aaa					x		1	x			x	x	x	x	x	x	x	x						x	x																																										Destination WORD Right Shifted with sign By 1 → Destination						
21	Bcc	Bcc #<data8>	0110.cccc.dddddddd							1																			8!{0,$ff}																																									If Condition True Then PC + dn → PC						
22	Bcc	Bcc #<data16>	0110.cccc.00000000							1																			16																																									If Condition True Then PC + dn → PC						
23	Bcc	Bcc #<data32>	0110.cccc.11111111							1																			32																																									If Condition True Then PC + dn → PC	x					
24	BCHG	BCHG Dn,Dx	0000.nnn.101.000.xxx						x	2		x																			x	x																																						TEST ( < bit number > of Destination) → Z; TEST ( < bit number > of Destination) → < bit number > of Destination						
25	BCHG	BCHG Dn,<ea>	0000.nnn.101.eee.aaa				x			2		x																			x			x	x	x	x	x	x	x	x			?	?	?	x	x																						TEST ( < bit number > of Destination) → Z; TEST ( < bit number > of Destination) → < bit number > of Destination						
26	BCHG	BCHG #<data8>,Dx	0000.100.001.000.xxx						x	2																			8		x	x																																						TEST ( < bit number > of Destination) → Z; TEST ( < bit number > of Destination) → < bit number > of Destination						
27	BCHG	BCHG #<data8>,<ea>	0000.100.001.eee.aaa				x			2																			8		x			x	x	x	x	x	x	x	x			?	?	?	x	x																						TEST ( < bit number > of Destination) → Z; TEST ( < bit number > of Destination) → < bit number > of Destination						
28	BCLR	BCLR Dn,Dx	0000.nnn.110.000.xxx						x	2		x																			x	x																																						TEST ( < bit number > of Destination) → Z; 0 → < bit number > of Destination						
29	BCLR	BCLR Dn,<ea>	0000.nnn.110.eee.aaa				x			2		x																			x			x	x	x	x	x	x	x	x			?	?	?	x	x																						TEST ( < bit number > of Destination) → Z; 0 → < bit number > of Destination						
30	BCLR	BCLR #<data8>,Dx	0000.100.010.000.xxx						x	2																			8		x	x																																						TEST ( < bit number > of Destination) → Z; 0 → < bit number > of Destination						
31	BCLR	BCLR #<data8>,<ea>	0000.100.010.eee.aaa				x			2																			8		x			x	x	x	x	x	x	x	x			?	?	?	x	x																						TEST ( < bit number > of Destination) → Z; 0 → < bit number > of Destination						
32	BFCHG	BFCHG <ea>{offset:width}	1110.101.011.eee.aaa	0000.o.fffff.w.iiiii		B				1	x	x		x			x	x	x	x	x						x	x																																										TEST ( < bit field > of Destination) → < bit field > of Destination						
33	BFCLR	BFCLR <ea>{offset:width}	1110.110.011.eee.aaa	0000.o.fffff.w.iiiii		B				1	x	x		x			x	x	x	x	x						x	x																																										0 → < bit field > of Destination						
34	BFEXTS	BFEXTS <ea>{offset:width},Dn	1110.101.111.eee.aaa	0.nnn.o.fffff.w.iiiii		B				2	x	x		x			x	x	x	x	x	x	x	x	x	x	x	x				x																																						< bit field > of Source → sign extended Dn						
35	BFEXTU	BFEXTU <ea>{offset:width},Dn	1110.100.111.eee.aaa	0.nnn.o.fffff.w.iiiii		B				2	x	x		x			x	x	x	x	x	x	x	x	x	x	x	x				x																																						< bit field > of Source → 0 filled Dn						
36	BFFFO	BFFFO <ea>{offset:width},Dn	1110.110.111.eee.aaa	0.nnn.o.fffff.w.iiiii		B				2	x	x		x			x	x	x	x	x	x	x	x	x	x	x	x				x																																						< bit offset > of Source Bit Scan → Dn						
37	BFINS	BFINS Dn,<ea>{offset:width}	1110.111.111.eee.aaa	0.nnn.o.fffff.w.iiiii		B				1		x																			x	x		x			x	x	x	x	x						x	x																						Dn → < bit field > of Destination						
38	BFSET	BFSET <ea>{offset:width}	1110.111.011.eee.aaa	0000.o.fffff.w.iiiii		B				1	x	x		x			x	x	x	x	x						x	x																																										1 → < bit field > of Destination						
39	BFTST	BFTST <ea>{offset:width}	1110.100.011.eee.aaa	0000.o.fffff.w.iiiii		B				1	x	x		x			x	x	x	x	x						x	x																																										< bit field > of Destination						
40	BKPT	BKPT #<data3>	0100.100.001.001.ddd							1																			3																																									Run Breakpoint Acknowledge Cycle; TRAP As Illegal Instruction						
41	BRA	BRA <disp8>	0110.0000.dddddddd							1																				8!{0,-1}																																								PC + Displacement → PC						
42	BRA	BRA <disp16>	0110.0000.00000000							1																				16																																								PC + Displacement → PC						
43	BRA	BRA <disp32>	0110.0000.11111111							1																				32																																								PC + Displacement → PC	x					
44	BSET	BSET Dn,Dx	0000.nnn.111.000.xxx						x	2		x																			x	x																																						TEST ( < bit number > of Destination) → Z; 1 → < bit number > of Destination						
45	BSET	BSET Dn,<ea>	0000.nnn.111.eee.aaa				x			2		x																			x			x	x	x	x	x	x	x	x						x	x																						TEST ( < bit number > of Destination) → Z; 1 → < bit number > of Destination						
46	BSET	BSET #<data8>,Dx	0000.100.011.000.xxx						x	2																			8		x	x																																						TEST ( < bit number > of Destination) → Z; 1 → < bit number > of Destination						
47	BSET	BSET #<data8>,<ea>	0000.100.011.eee.aaa				x			2																			8		x			x	x	x	x	x	x	x	x						x	x																						TEST ( < bit number > of Destination) → Z; 1 → < bit number > of Destination						
48	BSR	BSR <disp8>	0110.0001.dddddddd							1																				8!{0,-1}																																								SP – 4 → SP; PC → (SP); PC + dn → PC						
49	BSR	BSR <disp16>	0110.0001.00000000							1																				16																																								SP – 4 → SP; PC → (SP); PC + dn → PC						
50	BSR	BSR <disp32>	0110.0001.11111111							1																				32																																								SP – 4 → SP; PC → (SP); PC + dn → PC	x					
51	BTST	BTST Dn,Dx	0000.nnn.100.000.xxx						x	2		x																			x	x																																						TEST ( < bit number > of Destination) → Z						
52	BTST	BTST Dn,<ea>	0000.nnn.100.eee.aaa				x			2		x																			x			x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x																					TEST ( < bit number > of Destination) → Z						
53	BTST	BTST #<data8>,Dx	0000.100.000.000.xxx						x	2																			8		x	x																																						TEST ( < bit number > of Destination) → Z						
54	BTST	BTST #<data8>,<ea>	0000.100.000.eee.aaa				x			2																			8		x			x	x	x	x	x	x	x	x	x	x	x	x	x	x	x																						TEST ( < bit number > of Destination) → Z						
55	CALLM	CALLM #<data8>,<ea>	0000.011.011.eee.aaa							2																			8		x			x			x	x	x	x	x	x	x	x	x	x	x	x																						Save Current Module State on Stack; Load New Module State from Destination						
56	CAS	CAS Dc,Du,<ea>	0000.1ss.011.eee.aaa	0000.000.uuu.000.ccc		CAS	x	x	x	3		x																				x																			x			x	x	x	x	x	x	x	x						x	x		Destination Operand – Compare Operand → cc; If Z, Update Operand → Destination Operand Else Destination Operand → Compare Operand	x					
57	CAS2	CAS2 Dc1:Dc2,Du1:Du2,(Rn1):(Rn2)	0000.1ss.011.111.100	R.nnn.000.uuu.000.ccc	R.nnn.000.uuu.000.ccc	CAS	x	x	x	3		x:x																				x:x																					r:r																	Destination Operand 1 – Compare 1 → cc ; If Z, Destination Operand 2 – Compare 2 → cc ; If Z, Update 1 → Destination Operand 1; Update 2 → Destination Operand 2 ; Else Destination Operand 1 → Compare 1; Destination Operand 2 → Compare 2	x					
58	CHK	CHK <ea>,Dn	0100.nnn.ss0.eee.aaa					x		2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						If Dn < 0 or Dn > Source Then TRAP						
59	CHK	CHK <ea>,Dn	0100.nnn.ss0.eee.aaa						x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						If Dn < 0 or Dn > Source Then TRAP	x					
60	CHK2	CHK <ea>,Rn	0000.0ss.011.eee.aaa	R.nnn.100.000.000.000			x	x	x	2	x			x			x	x	x	x	x	x	x	x	x	x	x	x				x	x																																					If Rn < LB or Rn > UB Then TRAP	x					
61	CLR	CLR <ea>	0100.001.0ss.eee.aaa				x	x	x	1	x	x		x	x	x	x	x	x	x	x						x	x																																										0 → Destination						
62	CMP	CMP <ea>,Dn	1101.nnn.000.eee.aaa				x			2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						Destination – Source → cc						
63	CMP	CMP <ea>,Dn	1101.nnn.001.eee.aaa					x		2	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						Destination – Source → cc						
64	CMP	CMP <ea>,Dn	1101.nnn.010.eee.aaa						x	2	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						Destination – Source → cc						
65	CMPA	CMPA <ea>,An	1011.nnn.011.eee.aaa					x		2	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x		x		x																																					Destination – Source → cc						
66	CMPA	CMPA <ea>,An	1011.nnn.111.eee.aaa						x	2	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x		x		x																																					Destination – Source → cc						
67	CMPI	CMPI #<data>,<ea>	0000.110.0ss.eee.aaa				x	x	x	2																			x		x	x		x	x	x	x	x	x	x	x			x	x	x	x	x																						Destination – Immediate data → cc						
68	CMPI	CMPI #<data>,<ea>	0000.110.0ss.eee.aaa				x	x	x	2																			x		x											x	x																											Destination – Immediate data → cc			x			
69	CMPM	CMPM (Ay)+,(Ax)+	1011.xxx.1ss.001.yyy				x	x	x	2	x				x																				x																																			Destination – Source → cc						
70	CMP2	CMP2 <ea>,Rn	0000.0ss.011.eee.aaa	R.nnn.000.000.000.000			x	x	x	2	x			x			x	x	x	x	x	x	x	x	x	x	x	x			x	r	r																																					Compare Rn<LB or Rn>UB and Set Condition Codes	x					
71	cpBcc	cpBcc #<disp>	1111.ppp.01s.ccc.ccc	opt. coproc. ext. words	1,2,more ?			x	x	1																				16:32																																								If cpcc True Then Scan PC + dn → PC	x			x		
72	cpDBcc	cpDBcc Dn,#<data>	1111.ppp.001.001.nnn	0000.000.000.ccc.ccc	opt.coproc. ext. words			x		2	x	x																																						16																				If cpcc False Then (Dn – 1 → Dn; If Dn ≠ – 1 Then Scan PC + dn → PC)	x			x		
73	cpGEN	cpGEN #<command>	1111.ppp.000.eee.aaa	coproc. command word	e.a. or coproc. ext. words					1	?	?	?	?	?	?	?	?	?	?	?	?	?	?	?	?	?	?	?																																									Pass Command Word to Coprocessor	x					
74	cpScc	cpScc <ea>	1111.ppp.001.eee.aaa	0000.000.000.ccc.ccc	e.a. or coproc. ext. words					1	x	x		x	x	x	x	x	x	x	x						x	x																																										If cpcc True Then 1s → Destination Else 0s → Destination	x					
75	cpTRAPcc	cpTRAPcc	1111.ppp.001.111.100	0000.000.000.ccc.ccc	opt.coproc. ext. words					0																																																												If cpcc True Then TRAP	x					
76	cpTRAPcc	cpTRAPcc #<data16>	1111.ppp.001.111.010	0000.000.000.ccc.ccc	opt.coproc. ext. words					1																			16																																									If cpcc True Then TRAP	x					
77	cpTRAPcc	cpTRAPcc #<data32>	1111.ppp.001.111.011	0000.000.000.ccc.ccc	opt.coproc. ext. words					1																			32																																									If cpcc True Then TRAP	x					
78	DBcc	DBcc Dn,#<data16>	0101.cccc.11.001.nnn							2	x	x																																						16																				If Condition False Then (Dn – 1 → Dn; If Dn ≠ – 1 Then PC + dn → PC)						
79	DIVS	DIVS <ea>,Dn	1000.nnn.111.eee.aaa					x		2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x		32		x																																						[Signed] Destination(32) ÷ Source(32) → Destination(32) = remainder(16).quotient(16))						
80	DIVS	DIVS <ea>,Dq	0100.110.001.eee.aaa	0.qqq.100.000.000.qqq					x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x		32		x																																						[Signed] Destination(32 )÷ Source(32) → Destination(32) = quotient(32)	x					
81	DIVS	DIVS <ea>,Dr:Dq	0100.110.001.eee.aaa	0.qqq.110.000.000.rrr					x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x		32		x:x																																						[Signed] Destination(64:Dr.Dq) ÷ Source(32) → Destination(64) = remainder(32:Dr).quotient(32:Dq)	x					
82	DIVSL	DIVSL <ea>,Dr:Dq	0100.110.001.eee.aaa	0.qqq.100.000.000.rrr					x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x		32		x:x																																						[Signed] Destination(32:Dq) ÷ Source(32) → Destination(64) = remainder(32:Dr).quotient(32:Dq)	x					
83	DIVU	DIVU <ea>,Dn	1000.nnn.011.eee.aaa					x		2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	32			x																																						[Unsigned] Destination(32) ÷ Source(32) → Destination(32) = remainder(16).quotient(16))						
84	DIVU	DIVU <ea>,Dq	0100.110.001.eee.aaa	0.qqq.000.000.000.qqq					x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	32			x																																						[Unsigned] Destination(32 )÷ Source(32) → Destination(32) = quotient(32)	x					
85	DIVU	DIVU <ea>,Dr:Dq	0100.110.001.eee.aaa	0.qqq.010.000.000.rrr					x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	32			x:x																																						[Unsigned] Destination(64:Dr.Dq) ÷ Source(32) → Destination(64) = remainder(32:Dr).quotient(32:Dq)	x					
86	DIVUL	DIVUL <ea>,Dr:Dq	0100.110.001.eee.aaa	0.qqq.000.000.000.rrr					x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	32			x:x																																						[Unsigned] Destination(32:Dq) ÷ Source(32) → Destination(64) = remainder(32:Dr).quotient(32:Dq)	x					
87	EOR	EOR Dn,<ea>	1011.nnn.1ss.eee.aaa				x	x	x	2		x																			x	x		x	x	x	x	x	x	x	x						x	x																						Source ⊕ Destination → Destination						
88	EORI	EORI #<data>,<ea>	0000.101.0ss.eee.aaa				x	x	x	2																			x		x	x		x	x	x	x	x	x	x	x						x	x																						Immediate Data ⊕ Destination → Destination						
89	EORI	EORI #<data8>,CCR	0000.101.000.111.100				x			2																			8		CCR																																							Source ⊕ CCR → CCR						
90	EXG	EXG Dx,Dy	1100.xxx.101.000.yyy							2		x																			x	x																																						Dx ←→ Dy						
91	EXG	EXG Ax,Ay	1100.xxx.101.001.yyy							2			x																		x		x																																					Ax ←→ Ay						
92	EXG	EXG Dx,Ay	1100.xxx.110.001.yyy							2		x																			x		x																																					Dx ←→ Ay						
93	EXT	EXT Dn	0100.100.010.000.nnn					x		1	x	x																																																										Destination Sign-Extended → Destination						
94	EXT	EXT Dn	0100.100.011.000.nnn						x	1	x	x																																																										Destination Sign-Extended → Destination						
95	EXTB	EXTB Dn	0100.100.111.000.nnn						x	1	x	x																																																										Destination Sign-Extended → Destination						
96	ILLEGAL	ILLEGAL	0100.101.011.111.100							0																																																												SSP – 2 → SSP; Vector Offset → (SSP); SSP – 4 → SSP; PC → (SSP); SSP – 2 → SSP; SR → (SSP); Illegal Instruction Vector Address → PC						
97	JMP	JMP <ea>	0100.111.011.eee.aaa							1	x			x			x	x	x	x	x	x	x	x	x	x	x	x																																										Destination Address → PC						
98	JSR	JSR <ea>	0100.111.010.eee.aaa							1	x			x			x	x	x	x	x	x	x	x	x	x	x	x																																										SP – 4 → Sp; PC → (SP); Destination Address → PC						
99	LEA	LEA <ea>,An	0100.nnn.111.eee.aaa						x	2	x			x			x	x	x	x	x	x	x	x	x	x	x	x					x																																					<ea> → An						
100	LINK	LINK An,#<disp16>	0100.111.001.010.nnn					x		2	x			x																																				16																				SP – 4 → SP; An → (SP); SP → An; SP + dn → SP						
101	LINK	LINK An,#<disp32>	0100.100.000.001.nnn						x	2	x			x																																				32																				SP – 4 → SP; An → (SP); SP → An; SP + dn → SP						
102	LSL	LSL Dx,Dy	1110.xxx.1ss.101.yyy				x	x	x	2		x																			x	x																																						Destination Shifted By Count → Destination						
103	LSL	LSL #<data3.8>,Dy	1110.xxx.1ss.001.yyy				x	x	x	2																			x		x	x																																						Destination Shifted By Count → Destination						
104	LSL	LSL <ea>	1110.001.111.eee.aaa					x		1	x			x	x	x	x	x	x	x	x						x	x																																										Destination Word Shifted By 1 → Destination						
105	LSR	LSR Dx,Dy	1110.xxx.0ss.101.yyy				x	x	x	2		x																			x	x																																						Destination Shifted By Count → Destination						
106	LSR	LSR #<data3.8>,Dy	1110.xxx.0ss.001.yyy				x	x	x	2																			x		x	x																																						Destination Shifted By Count → Destination						
107	LSR	LSR <ea>	1110.001.011.eee.aaa					x		1	x			x	x	x	x	x	x	x	x						x	x																																										Destination Word Shifted By 1 → Destination						
108	MOVE	MOVE <ea>,<fb>	00ss.bbb.fff.eee.aaa				x			2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x		x	x	x	x	x	x	x	x						x	x																						Source → Destination						
109	MOVE	MOVE <ea>,<fb>	00ss.bbb.fff.eee.aaa					x	x	2	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x		x	x	x	x	x	x	x	x						x	x																						Source → Destination						
110	MOVEA	MOVEA <ea>,An	00ss.nnn.001.eee.aaa					x	x	2	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x				x																																					Source → Destination						
111	MOVE	MOVE CCR,<ea>	0100.001.011.eee.aaa					x		2	CCR																				x	x		x	x	x	x	x	x	x	x						x	x																						CCR → Destination						
112	MOVE	MOVE <ea>,CCR	0100.010.011.eea.aaa					x		2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x		CCR																																							Source → CCR						
113	MOVE	MOVE SR,<ea>	0100.000.011.eee.aaa					x		2	SR																				x	x		x	x	x	x	x									x	x																						SR → Destination					x	
114	MOVE16	MOVE16 (Ax)+,(Ay)+	1111.011.000.100.xxx	1.yyy.000.000.000.000						2	x				x																				x																																			Source Block → Destination Block						x
115	MOVE16	MOVE16 (Ay)+,(xxx).L	1111.011.000.000.nnn							2	x				x																																	x																						Source Block → Destination Block						x
116	MOVE16	MOVE16 (xxx).L,(Ay)+	1111.011.000.001.nnn							2																		x			x				x																																			Source Block → Destination Block						x
117	MOVE16	MOVE16 (Ay),(xxx).L	1111.011.000.010.nnn							2	x			x																																		x																						Source Block → Destination Block						x
118	MOVE16	MOVE16 (xxx).L,(Ay)	1111.011.000.011.nnn							2																		x			x			x																																				Source Block → Destination Block						x
119	MOVEM	MOVEM <list>,<ea>	0100.100.010.eee.aaa	Register list mask				x		2	(Register list mask)																				x			x		x	x	x	x	x	x						x	x																						Registers → Destination						
120	MOVEM	MOVEM <list>,<ea>	0100.100.011.eee.aaa	Register list mask					x	2	(Register list mask)																				x			x		x	x	x	x	x	x						x	x																						Registers → Destination						
121	MOVEM	MOVEM <ea>,<list>	0100.110.010.eee.aaa	Register list mask				x		2	x			x	x		x	x	x	x	x	x	x	x	x	x	x	x			(Register list mask)																																							Source → Registers						
122	MOVEM	MOVEM <ea>,<list>	0100.110.011.eee.aaa	Register list mask					x	2	x			x	x		x	x	x	x	x	x	x	x	x	x	x	x			(Register list mask)																																							Source → Registers						
123	MOVEP	MOVEP Dx,(d16,Ay)	0000.xxx.110.001.yyy	<data16>				x		2		x																			x		x																																					Source → Destination						
124	MOVEP	MOVEP Dx,(d16,Ay)	0000.xxx.111.001.yyy	<data16>					x	2		x																			x		x																																					Source → Destination						
125	MOVEP	MOVEP (d16,Ay),Dx	0000.xxx.100.001.yyy	<data16>				x		2	x		x																			x																																						Source → Destination						
126	MOVEP	MOVEP (d16,Ay),Dx	0000.xxx.101.001.yyy	<data16>					x	2	x		x																			x																																						Source → Destination						
127	MOVEQ	MOVEQ #<data8>,Dn	0111.nnn.0.dddddddd							2																				8		x																																						Immediate Data → Destination						
128	MULS	MULS <ea>,Dn	1100.nnn.111.eee.aaa					x		2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						[Signed] Source(16) × Destination(16) → Destination(32)						
129	MULS	MULS <ea>,Dl	0100.110.000.eee.aaa	0.lll.100.000.000.000					x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						[Signed] Source(32) × Destination(32) → Destination(32)	x					
130	MULS	MULS <ea>,Dh-Dl	0100.110.000.eee.aaa	0.lll.110.000.000.hhh					x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x-x																																						[Signed] Source(32) × Destination low(32) → Destination(64) = Destination high(32)—Destination low(32)	x					
131	MULU	MULU <ea>,Dn	1100.nnn.011.eee.aaa					x		2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						[Unsigned] Source(16) × Destination(16) → Destination(32)						
132	MULU	MULU <ea>,Dl	0100.110.000.eee.aaa	0.lll.000.000.000.000					x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						[Unsigned] Source(32) × Destination(32) → Destination(32)						
133	MULU	MULU <ea>,Dh-Dl	0100.110.000.eee.aaa	0.lll.010.000.000.hhh					x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x-x																																						[Unsigned] Source(32) × Destination low(32) → Destination(64) = Destination high(32)—Destination low(32)	x					
134	NBCD	NBCD <ea>	0100.100.000.eee.aaa				x			1	x	x		x	x	x	x	x	x	x	x						x	x																																										0 – Destination10 – X → Destination						
135	NEG	NEG <ea>	0100.010.0ss.eee.aaa				x	x	x	1	x	x		x	x	x	x	x	x	x	x						x	x																																										0 – Destination → Destination						
136	NEGX	NEGX <ea>	0100.000.0ss.eee.aaa				x	x	x	1	x	x		x	x	x	x	x	x	x	x						x	x																																										0 – Destination – X → Destination						
137	NOP	NOP	0100.111.001.110.001							0																																																												No operation, does wait any pending bus cycles before proceeding.						
138	NOT	NOT <ea>	0100.011.0ss.eee.aaa				x	x	x	1	x	x		x	x	x	x	x	x	x	x						x	x																																										~Destination → Destination						
139	OR	OR <ea>,Dn	1000.nnn.0ss.eee.aaa				x	x	x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						Source V Destination → Destination						
140	OR	OR Dn,<ea>	1000.nnn.1ss.eee.aaa				x	x	x	2		x																			x			x	x	x	x	x	x	x	x						x	x																						Source V Destination → Destination						
141	ORI	ORI #<data>,<ea>	0000.000.0ss.eee.aaa				x	x	x	2																			x		x	x		x	x	x	x	x	x	x	x						x	x																						Immediate Data V Destination → Destination						
142	ORI	ORI #<data8>,CCR	0000.000.000.111.100							2																			x		CCR																																							Immediate Data V CCR → CCR						
143	PACK	PACK -(Ax),-(Ay),#<data16>	1000.yyy.101.001.xxx	<data16>						3	x					x																					x																																x	Source (Unpacked BCD) + Adjustment → Destination (Packed BCD)	x					
144	PACK	PACK Dx,Dy,#<data16>	1000.yyy.101.000.xxx	<data16>						3	x	x																				x																																					x	Source (Unpacked BCD) + Adjustment → Destination (Packed BCD)	x					
145	PEA	PEA <ea>	0100.100.001.eee.aaa							1	x			x			x	x	x	x	x	x	x	x	x	x	x	x																																										SP – 4 → SP; <ea> → (SP)						
146	ROL	ROL Dx,Dy	1110.xxx.1ss.111.yyy				x	x	x	2		x																			x	x																																						Destination Rotated Left By <count> → Destination						
147	ROL	ROL #<data3.8>,Dy	1110.ddd.1ss.011.yyy				x	x	x	2																			x		x	x																																						Destination Rotated Left By <count> → Destination						
148	ROL	ROL <ea>	1110.001.111.eee.aaa					x		1	x			x	x	x	x	x	x	x	x						x	x																																										Destination Rotated Left By 1 → Destination						
149	ROR	ROR Dx,Dy	1110.xxx.0ss.111.yyy				x	x	x	2		x																			x	x																																						Destination Rotated Right By <count> → Destination						
150	ROR	ROR #<data3.8>,Dy	1110.ddd.0ss.011.yyy				x	x	x	2																			x		x	x																																						Destination Rotated Right By <count> → Destination						
151	ROR	ROR <ea>	1110.001.011.eee.aaa					x		1	x																																																											Destination Rotated Right By 1 → Destination						
152	ROXL	ROXL Dx,Dy	1110.xxx.1ss.110.yyy				x	x	x	2		x																			x	x																																						Destination Rotated Left With X By Count → Destination						
153	ROXL	ROXL #<data3.8>,Dy	1110.ddd.1ss.010.yyy				x	x	x	2																			x		x	x																																						Destination Rotated Left With X By Count → Destination						
154	ROXL	ROXL <ea>	1110.010.111.eee.aaa					x		1				x	x	x	x	x	x	x	x						x	x																																										Destination Rotated Left With X By 1 → Destination						
155	ROXR	ROXL Dx,Dy	1110.xxx.0ss.110.yyy				x	x	x	2		x																			x	x																																						Destination Rotated Right With X By Count → Destination						
156	ROXR	ROXR #<data3.8>,Dy	1110.ddd.0ss.010.yyy				x	x	x	2																			x		x	x																																						Destination Rotated Right With X By Count → Destination						
157	ROXR	ROXR <ea>	1110.010.011.eee.aaa					x		1	x			x	x	x	x	x	x	x	x						x	x																																										Destination Rotated Right With X By 1 → Destination						