Row ID	Mnemonic	Synopsys	Opcode	Supplemental Word #1	Supplemental Word #2	Domain	.b	.w	.l	Number of operands	Operand 1	Data Register Direct Mode	Address Register Direct Mode	Address Register Indirect Mode	Address Register Indirect with Postincrement Mode	Address Register Indirect with Predecrement Mode	Address Register Indirect with Displacement Mode	Address Register Indirect with Index (8-Bit Displacement) Mode	Address Register Indirect with Index (Base Displacement) Mode	Memory Indirect Postindexed Mode	Memory Indirect Preindexed Mode	Program Counter Indirect with Displacement Mode	Program Counter Indirect with Index (8-Bit Displacement) Mode	Program Counter Indirect with Index (Base Displacement) Mode	Program Counter Memory Indirect Postindexed Mode	Program Counter Memory Indirect Preindexed Mode	Absolute Short Addressing Mode	Absolute Long Addressing Mode	Immediate Data	Signed value	Operand 2	Data Register Direct Mode	Address Register Direct Mode	Address Register Indirect Mode	Address Register Indirect with Postincrement Mode	Address Register Indirect with Predecrement Mode	Address Register Indirect with Displacement Mode	Address Register Indirect with Index (8-Bit Displacement) Mode	Address Register Indirect with Index (Base Displacement) Mode	Memory Indirect Postindexed Mode	Memory Indirect Preindexed Mode	Program Counter Indirect with Displacement Mode	Program Counter Indirect with Index (8-Bit Displacement) Mode	Program Counter Indirect with Index (Base Displacement) Mode	Program Counter Memory Indirect Postindexed Mode	Program Counter Memory Indirect Preindexed Mode	Absolute Short Addressing Mode	Absolute Long Addressing Mode	Immediate Data	Signed value	Operand 3	Data Register Direct Mode	Address Register Direct Mode	Address Register Indirect Mode	Address Register Indirect with Postincrement Mode	Address Register Indirect with Predecrement Mode	Address Register Indirect with Displacement Mode	Address Register Indirect with Index (8-Bit Displacement) Mode	Address Register Indirect with Index (Base Displacement) Mode	Memory Indirect Postindexed Mode	Memory Indirect Preindexed Mode	Program Counter Indirect with Displacement Mode	Program Counter Indirect with Index (8-Bit Displacement) Mode	Program Counter Indirect with Index (Base Displacement) Mode	Program Counter Memory Indirect Postindexed Mode	Program Counter Memory Indirect Preindexed Mode	Absolute Short Addressing Mode	Absolute Long Addressing Mode	Immediate Data	Brief description	020+ only	020 only	Exclude 68000	Exclude 040	68000+68008 only	040 only
1	ABCD	ABCD Dy,Dx	1100.xxx.100.000.yyy				x			2	x	x																				x																																						Source10 + Destination10 + X → Destination10						
2	ABCD	ABCD -(Ay),-(Ax)	1100.xxx.100.001.yyy				x			2	x					x																				x																																		Source10 + Destination10 + X → Destination10						
3	ADD	ADD <ea>,Dn	1101.nnn.0ss.eee.aaa				x	x	x	2	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						Source + Destination → Destination						
4	ADD	ADD Dn,<ea>	1101.nnn.1ss.eee.aaa				x	x	x	2		x																			x			x	x	x	x	x	x	x	x						x	x																						Source + Destination → Destination						
5	ADDA	ADDA <ea>,An	1101.nnn.011.eee.aaa					x		2	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x				x																																					Source + Destination → Destination						
6	ADDA	ADDA <ea>,An	1101.nnn.111.eee.aaa						x	2	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x				x																																					Source + Destination → Destination						
7	ADDI	ADDI #<data>,<ea>	0000.011.0ss.eee.aaa				x	x	x	2																			x		x	x		x	x	x	x	x	x	x	x						x	x																						Immediate Data + Destination → Destination						
8	ADDQ	ADDQ #<data3.8>,<ea>	0101.ddd.0ss.eee.aaa				x	x	x	2																			3.8		x	x	x	x	x	x	x	x	x	x	x						x	x																						Immediate Data + Destination → Destination						
9	ADDX	ADDX Dy,Dx	1101.xxx.1ss.000.yyy				x	x	x	2	x	x																				x																																						Source + Destination + X → Destination						
10	ADDX	ADDX -(Ay),-(Ax)	1101.xxx.1ss.001.yyy				x	x	x	2	x					x																				x																																		Source + Destination + X → Destination						
11	AND	AND <ea>,Dn	1100.nnn.0ss.eee.aaa				x	x	x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						Source Λ Destination → Destination						
12	AND	AND Dn,<ea>	1100.nnn.1ss.eee.aaa				x	x	x	2		x																			x			x	x	x	x	x	x	x	x						x	x																						Source Λ Destination → Destination						
13	ANDI	ANDI #<data>,<ea>	0000.001.0ss.eee.aaa				x	x	x	2																			x		x	x		x	x	x	x	x	x	x	x						x	x																						Immediate Data Λ Destination → Destination						
14	ANDI	ANDI #<data>,CCR	0000.001.000.111.100				x			2	x																		x		CCR																																							Source Λ CCR → CCR						
15	ASL	ASL Dx,Dy	1110.xxx.1ss.100.yyy				x	x	x	2		x																			x	x																																						Destination Left Shifted By Count → Destination						
16	ASL	ASL #<data3.8>,Dy	1110.ddd.1ss.000.yyy				x	x	x	2																			x		x	x																																						Destination Left Shifted By Count → Destination						
17	ASL	ASL <ea>	1110.000.111.eee.aaa					x		1	x			x	x	x	x	x	x	x	x						x	x																																										Destination WORD Left Shifted By 1 → Destination						
18	ASR	ASR Dx,Dy	1110.xxx.0ss.100.yyy				x	x	x	2		x																			x	x																																						Destination Right Shifted with sign By Count → Destination						
19	ASR	ASR #<data3.8>,Dy	1110.ddd.0ss.000.yyy				x	x	x	2																			x		x	x																																						Destination Right Shifted with sign By Count → Destination						
20	ASR	ASR <ea>	1110.000.011.eee.aaa					x		1	x			x	x	x	x	x	x	x	x						x	x																																										Destination WORD Right Shifted with sign By 1 → Destination						
21	Bcc	Bcc #<data8>	0110.cccc.dddddddd							1																			8!{0,$ff}																																									If Condition True Then PC + dn → PC						
22	Bcc	Bcc #<data16>	0110.cccc.00000000							1																			16																																									If Condition True Then PC + dn → PC						
23	Bcc	Bcc #<data32>	0110.cccc.11111111							1																			32																																									If Condition True Then PC + dn → PC	x					
24	BCHG	BCHG Dn,Dx	0000.nnn.101.000.xxx						x	2		x																			x	x																																						TEST ( < bit number > of Destination) → Z; TEST ( < bit number > of Destination) → < bit number > of Destination						
25	BCHG	BCHG Dn,<ea>	0000.nnn.101.eee.aaa				x			2		x																			x			x	x	x	x	x	x	x	x			?	?	?	x	x																						TEST ( < bit number > of Destination) → Z; TEST ( < bit number > of Destination) → < bit number > of Destination						
26	BCHG	BCHG #<data8>,Dx	0000.100.001.000.xxx						x	2																			8		x	x																																						TEST ( < bit number > of Destination) → Z; TEST ( < bit number > of Destination) → < bit number > of Destination						
27	BCHG	BCHG #<data8>,<ea>	0000.100.001.eee.aaa				x			2																			8		x			x	x	x	x	x	x	x	x			?	?	?	x	x																						TEST ( < bit number > of Destination) → Z; TEST ( < bit number > of Destination) → < bit number > of Destination						
28	BCLR	BCLR Dn,Dx	0000.nnn.110.000.xxx						x	2		x																			x	x																																						TEST ( < bit number > of Destination) → Z; 0 → < bit number > of Destination						
29	BCLR	BCLR Dn,<ea>	0000.nnn.110.eee.aaa				x			2		x																			x			x	x	x	x	x	x	x	x			?	?	?	x	x																						TEST ( < bit number > of Destination) → Z; 0 → < bit number > of Destination						
30	BCLR	BCLR #<data8>,Dx	0000.100.010.000.xxx						x	2																			8		x	x																																						TEST ( < bit number > of Destination) → Z; 0 → < bit number > of Destination						
31	BCLR	BCLR #<data8>,<ea>	0000.100.010.eee.aaa				x			2																			8		x			x	x	x	x	x	x	x	x			?	?	?	x	x																						TEST ( < bit number > of Destination) → Z; 0 → < bit number > of Destination						
32	BFCHG	BFCHG <ea>{offset:width}	1110.101.011.eee.aaa	0000.o.fffff.w.iiiii		B				1	x	x		x			x	x	x	x	x						x	x																																										TEST ( < bit field > of Destination) → < bit field > of Destination						
33	BFCLR	BFCLR <ea>{offset:width}	1110.110.011.eee.aaa	0000.o.fffff.w.iiiii		B				1	x	x		x			x	x	x	x	x						x	x																																										0 → < bit field > of Destination						
34	BFEXTS	BFEXTS <ea>{offset:width},Dn	1110.101.111.eee.aaa	0.nnn.o.fffff.w.iiiii		B				2	x	x		x			x	x	x	x	x	x	x	x	x	x	x	x				x																																						< bit field > of Source → sign extended Dn						
35	BFEXTU	BFEXTU <ea>{offset:width},Dn	1110.100.111.eee.aaa	0.nnn.o.fffff.w.iiiii		B				2	x	x		x			x	x	x	x	x	x	x	x	x	x	x	x				x																																						< bit field > of Source → 0 filled Dn						
36	BFFFO	BFFFO <ea>{offset:width},Dn	1110.110.111.eee.aaa	0.nnn.o.fffff.w.iiiii		B				2	x	x		x			x	x	x	x	x	x	x	x	x	x	x	x				x																																						< bit offset > of Source Bit Scan → Dn						
37	BFINS	BFINS Dn,<ea>{offset:width}	1110.111.111.eee.aaa	0.nnn.o.fffff.w.iiiii		B				1		x																			x	x		x			x	x	x	x	x						x	x																						Dn → < bit field > of Destination						
38	BFSET	BFSET <ea>{offset:width}	1110.111.011.eee.aaa	0000.o.fffff.w.iiiii		B				1	x	x		x			x	x	x	x	x						x	x																																										1 → < bit field > of Destination						
39	BFTST	BFTST <ea>{offset:width}	1110.100.011.eee.aaa	0000.o.fffff.w.iiiii		B				1	x	x		x			x	x	x	x	x						x	x																																										< bit field > of Destination						
40	BKPT	BKPT #<data3>	0100.100.001.001.ddd							1																			3																																									Run Breakpoint Acknowledge Cycle; TRAP As Illegal Instruction						
41	BRA	BRA <disp8>	0110.0000.dddddddd							1																				8!{0,-1}																																								PC + Displacement → PC						
42	BRA	BRA <disp16>	0110.0000.00000000							1																				16																																								PC + Displacement → PC						
43	BRA	BRA <disp32>	0110.0000.11111111							1																				32																																								PC + Displacement → PC	x					
44	BSET	BSET Dn,Dx	0000.nnn.111.000.xxx						x	2		x																			x	x																																						TEST ( < bit number > of Destination) → Z; 1 → < bit number > of Destination						
45	BSET	BSET Dn,<ea>	0000.nnn.111.eee.aaa				x			2		x																			x			x	x	x	x	x	x	x	x						x	x																						TEST ( < bit number > of Destination) → Z; 1 → < bit number > of Destination						
46	BSET	BSET #<data8>,Dx	0000.100.011.000.xxx						x	2																			8		x	x																																						TEST ( < bit number > of Destination) → Z; 1 → < bit number > of Destination						
47	BSET	BSET #<data8>,<ea>	0000.100.011.eee.aaa				x			2																			8		x			x	x	x	x	x	x	x	x						x	x																						TEST ( < bit number > of Destination) → Z; 1 → < bit number > of Destination						
48	BSR	BSR <disp8>	0110.0001.dddddddd							1																				8!{0,-1}																																								SP – 4 → SP; PC → (SP); PC + dn → PC						
49	BSR	BSR <disp16>	0110.0001.00000000							1																				16																																								SP – 4 → SP; PC → (SP); PC + dn → PC						
50	BSR	BSR <disp32>	0110.0001.11111111							1																				32																																								SP – 4 → SP; PC → (SP); PC + dn → PC	x					
51	BTST	BTST Dn,Dx	0000.nnn.100.000.xxx						x	2		x																			x	x																																						TEST ( < bit number > of Destination) → Z						
52	BTST	BTST Dn,<ea>	0000.nnn.100.eee.aaa				x			2		x																			x			x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x																					TEST ( < bit number > of Destination) → Z						
53	BTST	BTST #<data8>,Dx	0000.100.000.000.xxx						x	2																			8		x	x																																						TEST ( < bit number > of Destination) → Z						
54	BTST	BTST #<data8>,<ea>	0000.100.000.eee.aaa				x			2																			8		x			x	x	x	x	x	x	x	x	x	x	x	x	x	x	x																						TEST ( < bit number > of Destination) → Z						
55	CALLM	CALLM #<data8>,<ea>	0000.011.011.eee.aaa							2																			8		x			x			x	x	x	x	x	x	x	x	x	x	x	x																						Save Current Module State on Stack; Load New Module State from Destination						
56	CAS	CAS Dc,Du,<ea>	0000.1ss.011.eee.aaa	0000.000.uuu.000.ccc		CAS	x	x	x	3		x																				x																			x			x	x	x	x	x	x	x	x						x	x		Destination Operand – Compare Operand → cc; If Z, Update Operand → Destination Operand Else Destination Operand → Compare Operand	x					
57	CAS2	CAS2 Dc1:Dc2,Du1:Du2,(Rn1):(Rn2)	0000.1ss.011.111.100	R.nnn.000.uuu.000.ccc	R.nnn.000.uuu.000.ccc	CAS	x	x	x	3		x:x																				x:x																					r:r																	Destination Operand 1 – Compare 1 → cc ; If Z, Destination Operand 2 – Compare 2 → cc ; If Z, Update 1 → Destination Operand 1; Update 2 → Destination Operand 2 ; Else Destination Operand 1 → Compare 1; Destination Operand 2 → Compare 2	x					
58	CHK	CHK <ea>,Dn	0100.nnn.ss0.eee.aaa					x		2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						If Dn < 0 or Dn > Source Then TRAP						
59	CHK	CHK <ea>,Dn	0100.nnn.ss0.eee.aaa						x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						If Dn < 0 or Dn > Source Then TRAP	x					
60	CHK2	CHK <ea>,Rn	0000.0ss.011.eee.aaa	R.nnn.100.000.000.000			x	x	x	2	x			x			x	x	x	x	x	x	x	x	x	x	x	x				x	x																																					If Rn < LB or Rn > UB Then TRAP	x					
61	CLR	CLR <ea>	0100.001.0ss.eee.aaa				x	x	x	1	x	x		x	x	x	x	x	x	x	x						x	x																																										0 → Destination						
62	CMP	CMP <ea>,Dn	1101.nnn.000.eee.aaa				x			2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						Destination – Source → cc						
63	CMP	CMP <ea>,Dn	1101.nnn.001.eee.aaa					x		2	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						Destination – Source → cc						
64	CMP	CMP <ea>,Dn	1101.nnn.010.eee.aaa						x	2	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						Destination – Source → cc						
65	CMPA	CMPA <ea>,An	1011.nnn.011.eee.aaa					x		2	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x		x		x																																					Destination – Source → cc						
66	CMPA	CMPA <ea>,An	1011.nnn.111.eee.aaa						x	2	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x		x		x																																					Destination – Source → cc						
67	CMPI	CMPI #<data>,<ea>	0000.110.0ss.eee.aaa				x	x	x	2																			x		x	x		x	x	x	x	x	x	x	x			x	x	x	x	x																						Destination – Immediate data → cc						
68	CMPI	CMPI #<data>,<ea>	0000.110.0ss.eee.aaa				x	x	x	2																			x		x											x	x																											Destination – Immediate data → cc			x			
69	CMPM	CMPM (Ay)+,(Ax)+	1011.xxx.1ss.001.yyy				x	x	x	2	x				x																				x																																			Destination – Source → cc						
70	CMP2	CMP2 <ea>,Rn	0000.0ss.011.eee.aaa	R.nnn.000.000.000.000			x	x	x	2	x			x			x	x	x	x	x	x	x	x	x	x	x	x			x	r	r																																					Compare Rn<LB or Rn>UB and Set Condition Codes	x					
71	DBcc	DBcc Dn,#<data16>	0101.cccc.11.001.nnn							2	x	x																																						16																				If Condition False Then (Dn – 1 → Dn; If Dn ≠ – 1 Then PC + dn → PC)						
72	DIVS	DIVS <ea>,Dn	1000.nnn.111.eee.aaa					x		2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x		32		x																																						[Signed] Destination(32) ÷ Source(32) → Destination(32) = remainder(16).quotient(16))						
73	DIVS	DIVS <ea>,Dq	0100.110.001.eee.aaa	0.qqq.100.000.000.qqq					x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x		32		x																																						[Signed] Destination(32 )÷ Source(32) → Destination(32) = quotient(32)	x					
74	DIVS	DIVS <ea>,Dr:Dq	0100.110.001.eee.aaa	0.qqq.110.000.000.rrr					x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x		32		x:x																																						[Signed] Destination(64:Dr.Dq) ÷ Source(32) → Destination(64) = remainder(32:Dr).quotient(32:Dq)	x					
75	DIVSL	DIVSL <ea>,Dr:Dq	0100.110.001.eee.aaa	0.qqq.100.000.000.rrr					x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x		32		x:x																																						[Signed] Destination(32:Dq) ÷ Source(32) → Destination(64) = remainder(32:Dr).quotient(32:Dq)	x					
76	DIVU	DIVU <ea>,Dn	1000.nnn.011.eee.aaa					x		2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	32			x																																						[Unsigned] Destination(32) ÷ Source(32) → Destination(32) = remainder(16).quotient(16))						
77	DIVU	DIVU <ea>,Dq	0100.110.001.eee.aaa	0.qqq.000.000.000.qqq					x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	32			x																																						[Unsigned] Destination(32 )÷ Source(32) → Destination(32) = quotient(32)	x					
78	DIVU	DIVU <ea>,Dr:Dq	0100.110.001.eee.aaa	0.qqq.010.000.000.rrr					x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	32			x:x																																						[Unsigned] Destination(64:Dr.Dq) ÷ Source(32) → Destination(64) = remainder(32:Dr).quotient(32:Dq)	x					
79	DIVUL	DIVUL <ea>,Dr:Dq	0100.110.001.eee.aaa	0.qqq.000.000.000.rrr					x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	32			x:x																																						[Unsigned] Destination(32:Dq) ÷ Source(32) → Destination(64) = remainder(32:Dr).quotient(32:Dq)	x					
80	EOR	EOR Dn,<ea>	1011.nnn.1ss.eee.aaa				x	x	x	2		x																			x	x		x	x	x	x	x	x	x	x						x	x																						Source ⊕ Destination → Destination						
81	EORI	EORI #<data>,<ea>	0000.101.0ss.eee.aaa				x	x	x	2																			x		x	x		x	x	x	x	x	x	x	x						x	x																						Immediate Data ⊕ Destination → Destination						
82	EORI	EORI #<data8>,CCR	0000.101.000.111.100				x			2																			8		CCR																																							Source ⊕ CCR → CCR						
83	EXG	EXG Dx,Dy	1100.xxx.101.000.yyy							2		x																			x	x																																						Dx ←→ Dy						
84	EXG	EXG Ax,Ay	1100.xxx.101.001.yyy							2			x																		x		x																																					Ax ←→ Ay						
85	EXG	EXG Dx,Ay	1100.xxx.110.001.yyy							2		x																			x		x																																					Dx ←→ Ay						
86	EXT	EXT Dn	0100.100.010.000.nnn					x		1	x	x																																																										Destination Sign-Extended → Destination						
87	EXT	EXT Dn	0100.100.011.000.nnn						x	1	x	x																																																										Destination Sign-Extended → Destination						
88	EXTB	EXTB Dn	0100.100.111.000.nnn						x	1	x	x																																																										Destination Sign-Extended → Destination						
89	ILLEGAL	ILLEGAL	0100.101.011.111.100							0																																																												SSP – 2 → SSP; Vector Offset → (SSP); SSP – 4 → SSP; PC → (SSP); SSP – 2 → SSP; SR → (SSP); Illegal Instruction Vector Address → PC						
90	JMP	JMP <ea>	0100.111.011.eee.aaa							1	x			x			x	x	x	x	x	x	x	x	x	x	x	x																																										Destination Address → PC						
91	JSR	JSR <ea>	0100.111.010.eee.aaa							1	x			x			x	x	x	x	x	x	x	x	x	x	x	x																																										SP – 4 → Sp; PC → (SP); Destination Address → PC						
92	LEA	LEA <ea>,An	0100.nnn.111.eee.aaa						x	2	x			x			x	x	x	x	x	x	x	x	x	x	x	x					x																																					<ea> → An						
93	LINK	LINK An,#<disp16>	0100.111.001.010.nnn					x		2	x			x																																				16																				SP – 4 → SP; An → (SP); SP → An; SP + dn → SP						
94	LINK	LINK An,#<disp32>	0100.100.000.001.nnn						x	2	x			x																																				32																				SP – 4 → SP; An → (SP); SP → An; SP + dn → SP						
95	LSL	LSL Dx,Dy	1110.xxx.1ss.101.yyy				x	x	x	2		x																			x	x																																						Destination Shifted By Count → Destination						
96	LSL	LSL #<data3.8>,Dy	1110.xxx.1ss.001.yyy				x	x	x	2																			x		x	x																																						Destination Shifted By Count → Destination						
97	LSL	LSL <ea>	1110.001.111.eee.aaa					x		1	x			x	x	x	x	x	x	x	x						x	x																																										Destination Word Shifted By 1 → Destination						
98	LSR	LSR Dx,Dy	1110.xxx.0ss.101.yyy				x	x	x	2		x																			x	x																																						Destination Shifted By Count → Destination						
99	LSR	LSR #<data3.8>,Dy	1110.xxx.0ss.001.yyy				x	x	x	2																			x		x	x																																						Destination Shifted By Count → Destination						
100	LSR	LSR <ea>	1110.001.011.eee.aaa					x		1	x			x	x	x	x	x	x	x	x						x	x																																										Destination Word Shifted By 1 → Destination						
101	MOVE	MOVE <ea>,<fb>	00ss.bbb.fff.eee.aaa				x			2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x		x	x	x	x	x	x	x	x						x	x																						Source → Destination						
102	MOVE	MOVE <ea>,<fb>	00ss.bbb.fff.eee.aaa					x	x	2	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x		x	x	x	x	x	x	x	x						x	x																						Source → Destination						
103	MOVEA	MOVEA <ea>,An	00ss.nnn.001.eee.aaa					x	x	2	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x				x																																					Source → Destination						
104	MOVE	MOVE CCR,<ea>	0100.001.011.eee.aaa					x		2	CCR																				x	x		x	x	x	x	x	x	x	x						x	x																						CCR → Destination						
105	MOVE	MOVE <ea>,CCR	0100.010.011.eea.aaa					x		2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x		CCR																																							Source → CCR						
106	MOVE	MOVE SR,<ea>	0100.000.011.eee.aaa					x		2	SR																				x	x		x	x	x	x	x									x	x																						SR → Destination					x	
107	MOVE16	MOVE16 (Ax)+,(Ay)+	1111.011.000.100.xxx	1.yyy.000.000.000.000						2	x				x																				x																																			Source Block → Destination Block						x
108	MOVE16	MOVE16 (Ay)+,(xxx).L	1111.011.000.000.nnn							2	x				x																																	x																						Source Block → Destination Block						x
109	MOVE16	MOVE16 (xxx).L,(Ay)+	1111.011.000.001.nnn							2																		x			x				x																																			Source Block → Destination Block						x
110	MOVE16	MOVE16 (Ay),(xxx).L	1111.011.000.010.nnn							2	x			x																																		x																						Source Block → Destination Block						x
111	MOVE16	MOVE16 (xxx).L,(Ay)	1111.011.000.011.nnn							2																		x			x			x																																				Source Block → Destination Block						x
112	MOVEM	MOVEM <list>,<ea>	0100.100.010.eee.aaa	Register list mask				x		2	(Register list mask)																				x			x		x	x	x	x	x	x						x	x																						Registers → Destination						
113	MOVEM	MOVEM <list>,<ea>	0100.100.011.eee.aaa	Register list mask					x	2	(Register list mask)																				x			x		x	x	x	x	x	x						x	x																						Registers → Destination						
114	MOVEM	MOVEM <ea>,<list>	0100.110.010.eee.aaa	Register list mask				x		2	x			x	x		x	x	x	x	x	x	x	x	x	x	x	x			(Register list mask)																																							Source → Registers						
115	MOVEM	MOVEM <ea>,<list>	0100.110.011.eee.aaa	Register list mask					x	2	x			x	x		x	x	x	x	x	x	x	x	x	x	x	x			(Register list mask)																																							Source → Registers						
116	MOVEP	MOVEP Dx,(d16,Ay)	0000.xxx.110.001.yyy	<data16>				x		2		x																			x		x																																					Source → Destination						
117	MOVEP	MOVEP Dx,(d16,Ay)	0000.xxx.111.001.yyy	<data16>					x	2		x																			x		x																																					Source → Destination						
118	MOVEP	MOVEP (d16,Ay),Dx	0000.xxx.100.001.yyy	<data16>				x		2	x		x																			x																																						Source → Destination						
119	MOVEP	MOVEP (d16,Ay),Dx	0000.xxx.101.001.yyy	<data16>					x	2	x		x																			x																																						Source → Destination						
120	MOVEQ	MOVEQ #<data8>,Dn	0111.nnn.0.dddddddd							2																				8		x																																						Immediate Data → Destination						
121	MULS	MULS <ea>,Dn	1100.nnn.111.eee.aaa					x		2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						[Signed] Source(16) × Destination(16) → Destination(32)						
122	MULS	MULS <ea>,Dl	0100.110.000.eee.aaa	0.lll.100.000.000.000					x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						[Signed] Source(32) × Destination(32) → Destination(32)	x					
123	MULS	MULS <ea>,Dh-Dl	0100.110.000.eee.aaa	0.lll.110.000.000.hhh					x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x-x																																						[Signed] Source(32) × Destination low(32) → Destination(64) = Destination high(32)—Destination low(32)	x					
124	MULU	MULU <ea>,Dn	1100.nnn.011.eee.aaa					x		2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						[Unsigned] Source(16) × Destination(16) → Destination(32)						
125	MULU	MULU <ea>,Dl	0100.110.000.eee.aaa	0.lll.000.000.000.000					x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						[Unsigned] Source(32) × Destination(32) → Destination(32)						
126	MULU	MULU <ea>,Dh-Dl	0100.110.000.eee.aaa	0.lll.010.000.000.hhh					x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x-x																																						[Unsigned] Source(32) × Destination low(32) → Destination(64) = Destination high(32)—Destination low(32)	x					
127	NBCD	NBCD <ea>	0100.100.000.eee.aaa				x			1	x	x		x	x	x	x	x	x	x	x						x	x																																										0 – Destination10 – X → Destination						
128	NEG	NEG <ea>	0100.010.0ss.eee.aaa				x	x	x	1	x	x		x	x	x	x	x	x	x	x						x	x																																										0 – Destination → Destination						
129	NEGX	NEGX <ea>	0100.000.0ss.eee.aaa				x	x	x	1	x	x		x	x	x	x	x	x	x	x						x	x																																										0 – Destination – X → Destination						
130	NOP	NOP	0100.111.001.110.001							0																																																												No operation, does wait any pending bus cycles before proceeding.						
131	NOT	NOT <ea>	0100.011.0ss.eee.aaa				x	x	x	1	x	x		x	x	x	x	x	x	x	x						x	x																																										~Destination → Destination						
132	OR	OR <ea>,Dn	1000.nnn.0ss.eee.aaa				x	x	x	2	x	x		x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						Source V Destination → Destination						
133	OR	OR Dn,<ea>	1000.nnn.1ss.eee.aaa				x	x	x	2		x																			x			x	x	x	x	x	x	x	x						x	x																						Source V Destination → Destination						
134	ORI	ORI #<data>,<ea>	0000.000.0ss.eee.aaa				x	x	x	2																			x		x	x		x	x	x	x	x	x	x	x						x	x																						Immediate Data V Destination → Destination						
135	ORI	ORI #<data8>,CCR	0000.000.000.111.100							2																			x		CCR																																							Immediate Data V CCR → CCR						
136	PACK	PACK -(Ax),-(Ay),#<data16>	1000.yyy.101.001.xxx	<data16>						3	x					x																					x																																x	Source (Unpacked BCD) + Adjustment → Destination (Packed BCD)	x					
137	PACK	PACK Dx,Dy,#<data16>	1000.yyy.101.000.xxx	<data16>						3	x	x																				x																																					x	Source (Unpacked BCD) + Adjustment → Destination (Packed BCD)	x					
138	PEA	PEA <ea>	0100.100.001.eee.aaa							1	x			x			x	x	x	x	x	x	x	x	x	x	x	x																																										SP – 4 → SP; <ea> → (SP)						
139	ROL	ROL Dx,Dy	1110.xxx.1ss.111.yyy				x	x	x	2		x																			x	x																																						Destination Rotated Left By <count> → Destination						
140	ROL	ROL #<data3.8>,Dy	1110.ddd.1ss.011.yyy				x	x	x	2																			x		x	x																																						Destination Rotated Left By <count> → Destination						
141	ROL	ROL <ea>	1110.001.111.eee.aaa					x		1	x			x	x	x	x	x	x	x	x						x	x																																										Destination Rotated Left By 1 → Destination						
142	ROR	ROR Dx,Dy	1110.xxx.0ss.111.yyy				x	x	x	2		x																			x	x																																						Destination Rotated Right By <count> → Destination						
143	ROR	ROR #<data3.8>,Dy	1110.ddd.0ss.011.yyy				x	x	x	2																			x		x	x																																						Destination Rotated Right By <count> → Destination						
144	ROR	ROR <ea>	1110.001.011.eee.aaa					x		1	x																																																											Destination Rotated Right By 1 → Destination						
145	ROXL	ROXL Dx,Dy	1110.xxx.1ss.110.yyy				x	x	x	2		x																			x	x																																						Destination Rotated Left With X By Count → Destination						
146	ROXL	ROXL #<data3.8>,Dy	1110.ddd.1ss.010.yyy				x	x	x	2																			x		x	x																																						Destination Rotated Left With X By Count → Destination						
147	ROXL	ROXL <ea>	1110.010.111.eee.aaa					x		1				x	x	x	x	x	x	x	x						x	x																																										Destination Rotated Left With X By 1 → Destination						
148	ROXR	ROXL Dx,Dy	1110.xxx.0ss.110.yyy				x	x	x	2		x																			x	x																																						Destination Rotated Right With X By Count → Destination						
149	ROXR	ROXR #<data3.8>,Dy	1110.ddd.0ss.010.yyy				x	x	x	2																			x		x	x																																						Destination Rotated Right With X By Count → Destination						
150	ROXR	ROXR <ea>	1110.010.011.eee.aaa					x		1	x			x	x	x	x	x	x	x	x						x	x																																										Destination Rotated Right With X By 1 → Destination						
151	RTD	RTD #<disp16>	0100.111.001.110.100							1																				16																																								(SP) → PC; SP + 4 + dn → SP			x			
152	RTM	RTM Dn	0000.011.011.000.nnn							1	x	x																																																										Reload Saved Module State from Stack		x				
153	RTM	RTM An	0000.011.011.001.nnn							1			x																																																									Reload Saved Module State from Stack		x				
154	RTR	RTR	0100.111.001.110.111																																																																			(SP) → CCR; SP + 2 → SP; (SP) → PC; SP + 4 → SP						
155	RTS	RTS	0100.111.001.110.101																																																																			(SP) → PC; SP + 4 → SP						
156	SBCD	SBCD Dx,Dy	1000.yyy.100.000.xxx				x			2	x	x																				x																																						Destination10 – Source10 – X → Destination						
157	SBCD	SBCD -(Ax),-(Ay)	1000.yyy.100.001.xxx				x			2	x					x																				x																																		Destination10 – Source10 – X → Destination						
158	Scc	Scc <ea>	0101.cccc.11.eee.aaa				x			1	x	x		x	x	x	x	x	x	x	x						x	x																																										If Condition True ; Then 1s → Destination ; Else 0s → Destination						
159	SUB	SUB <ea>,Dn	1001.nnn.1ss.eee.aaa				x	x	x	2	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x			x																																						Destination – Source → Destination						
160	SUB	SUB Dn,<ea>	1001.nnn.0ss.eee.aaa				x	x	x	2		x																			x			x	x	x	x	x	x	x	x						x	x																						Destination – Source → Destination						
161	SUBA	SUBA <ea>,An	1001.nnn.011.eee.aaa					x		2	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x				x																																					Destination – Source → Destination						
162	SUBA	SUBA <ea>,An	1001.nnn.111.eee.aaa						x	2	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x				x																																					Destination – Source → Destination						
163	SUBI	SUBI #<data>,<ea>	0000.010.0ss.eee.aaa				x	x	x	2																			x		x	x		x	x	x	x	x	x	x	x						x	x																						Destination – Immediate Data → Destination						
164	SUBQ	SUBQ #<data3.8>,<ea>	0101.ddd.1ss.eee.aaa				x	x	x	2																			3.8		x	x	x	x	x	x	x	x	x	x	x						x	x																						Destination – Immediate Data → Destination						
165	SUBX	SUBX Dx,Dy	1011.yyy.1ss.000.xxx				x	x	x	2	x	x																				x																																						Destination – Source – X → Destination						
166	SUBX	SUBX -(Ax),-(Ay)	1011.yyy.1ss.001.xxx				x	x	x	2	x					x																				x																																		Destination – Source – X → Destination						
167	SWAP	SWAP Dn	0100.100.001.000.nnn							1	x	x																																																										Register 31 – 16 ←→ Register 15 – 0						
168	TAS	TAS <ea>	0100.101.011.eee.aaa							1	x	x		x	x	x	x	x	x	x	x						x	x																																										Destination Tested → Condition Codes; 1 → Bit 7 of Destination						
169	TRAP	TRAP #<data4>	0100.1110.0100.dddd							1	x																		4																																									1 → S-Bit of SR;; {*SSP – 2 → SSP; Format/Offset → (SSP);;} SSP – 4 → SSP; PC → (SSP); SSP – 2 → SSP; SR → (SSP);; Vector Address → PC // *The MC68000 and MC68008 do not write vector offset or format code to the system stack.)						
170	TRAPcc	TRAPcc	0101.cccc.11.111.100																																																																			If cc Then TRAP #7						
171	TRAPcc	TRAPcc #<data16>	0101.cccc.11.111.010					x		1																			16																																									If cc Then TRAP #7						
172	TRAPcc	TRAPcc #<data32>	0101.cccc.11.111.011						x	1																			32																																									If cc Then TRAP #7						
173	TRAPV	TRAPV	0100.111.001.110.110																																																																			If V Then TRAP #7						
174	TST	TST <ea>	0100.101.0ss.eee.aaa				x	x	x	1	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x																																									Destination Tested → Condition Codes						
175	UNLK	UNLK An	0100.111.001.011.nnn							1	x		x																																																									An → SP; (SP) → An; SP + 4 → SP						
176	UNPK	UNPK -(Ax),-(Ay),#<data16>	1000.yyy.110.001.xxx	<data16>						2	x					x																				x																																		Source (Packed BCD) + Adjustment → Destination (Unpacked BCD)						
177	UNPK	UNPK Dx,Dy,#<data16>	1000.yyy.110.000.xxx	<data16>						2	x	x																				x																																						Source (Packed BCD) + Adjustment → Destination (Unpacked BCD)						